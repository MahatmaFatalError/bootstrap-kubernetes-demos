#!/bin/bash

set -eu

export PROJECT_NAME=${PROJECT_NAME:-$(gcloud config get-value core/project)}
export CLUSTER_REGION=${CLUSTER_REGION:-$(gcloud config get-value compute/region)}
export CLUSTER_ZONE=${CLUSTER_ZONE:-$(gcloud config get-value compute/zone)}
export CLUSTER_NAME=${CLUSTER_NAME:-knative}
export MACHINE_TYPE=${MACHINE_TYPE:-n1-standard-2}

export kpack_version=${KPACK_VERSION:-0.0.3}
export knative_istio_version=${ISTIO_VERSION:-1.2.0}
export knative_version=${KNATIVE_VERSION:-0.7.1}
export knative_build_version=${KNATIVE_BUILD_VERSION:-0.7.0}

usage() {
    echo "Bootstrap Kube/Helm/Knative on GKE"
    echo "  up [--helm|--tiller] -- deploys secure Helm"
    echo "     [--cf|--eirini]   -- deploys Cloud Foundry/Eirini"
    echo "     [--kpack]         -- deploys kpack to build images with buildpacks"
    echo "     [--tekton]        -- deploys Tekton CD"
    echo "     [--knative]       -- deploys Knative Build/Serving/Istio"
    echo "     [--knative-addr-name name] -- map GCP address to ingress gateway"
    echo "     [--knative-build] -- deploys nightly Knative Build"
    echo "     [--kubeapp]               -- deploys Kubeapps"
    echo "     [--service-catalog|--sc]  -- deploys Helm/Service Catalog"
    echo "     [--cf-broker]     -- deploys Helm/Service Catalog/Cloud Foundry Service Broker"
    echo "  down                          -- destroys GKE cluster"
}

down() {
  [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
    echo "Deleting values from Credhub ${CREDHUB_BASE_PATH}..."
    set +e
    credhub delete -n ${CREDHUB_BASE_PATH}/gke-project-name
    credhub delete -n ${CREDHUB_BASE_PATH}/gke-cluster-name
    credhub delete -n ${CREDHUB_BASE_PATH}/gke-cluster-zone
    credhub delete -n ${CREDHUB_BASE_PATH}/gke-cluster-region
    credhub delete -n ${CREDHUB_BASE_PATH}/helm-ca
    credhub delete -n ${CREDHUB_BASE_PATH}/helm-tiller-cert
    credhub delete -n ${CREDHUB_BASE_PATH}/helm-tiller-key
    set -e
  }
  gcloud container clusters delete $CLUSTER_NAME --region $CLUSTER_ZONE --quiet
}

up() {
  errors=
  [[ "$(which gcloud)X" == "X" ]] && { echo "ERROR: missing 'gcloud' CLI from \$PATH"; errors=1; }
  [[ "$(which kubectl)X" == "X" ]] && { echo "ERROR: missing 'kubectl' CLI from \$PATH"; errors=1; }
  [[ "${helm:-}" == "1" && "$(which helm-manager)X" == "X" ]] && { echo "ERROR: missing 'helm-manager' CLI from \$PATH"; errors=1; }
  [[ "${cf_broker:-}" == "1" ]] && {
    : ${CF_API:?required for --cf-broker}
    : ${CF_USERNAME:?required for --cf-broker}
    : ${CF_PASSWORD:?required for --cf-broker}
    : ${CF_ORGANIZATION:?required for --cf-broker}
    : ${CF_SPACE:?required for --cf-broker}
    : ${CF_MARKETPLACE_BROKER_PATH:?need /path/to/cf-marketplace-servicebroker}
  }
  [[ "${knative:-}" == "1" && "$(which knctl)X" == "X" ]] && { echo "ERROR: missing 'knctl' CLI from \$PATH"; errors=1; }
  [[ "$errors" == "1" ]] && { exit 1; }

  [[ "${cf_broker:-}" == "1" ]] && {
    echo "Testing login to Cloud Foundry ${CF_API}..."
    cf api ${CF_API}
    cf auth ${CF_USERNAME} ${CF_PASSWORD}
    cf target -o ${CF_ORGANIZATION} -s ${CF_SPACE}
  }

  [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
    echo "Testing access to Credhub ${CREDHUB_BASE_PATH}..."
    credhub find -n ${CREDHUB_BASE_PATH} > /dev/null
  }

  gcloud container clusters describe $CLUSTER_NAME --region $CLUSTER_ZONE 2>&1 > /dev/null || {
    echo "Creating GKE cluster..."
    additional_flags=
    [[ "${cfcontainers:-}" == "1" ]] && {
      echo "- Using UBUNTU image-type for cf-containers/eirini requirements"
      # https://github.com/SUSE/scf/wiki/Deployment-on-Google-GKE
      additional_flags="${additional_flags} --image-type UBUNTU"
      # TODO -  additional_flags="${additional_flags} --addons=HttpLoadBalancing"
      # see https://cloud.google.com/sdk/gcloud/reference/container/clusters/create
      additional_flags="${additional_flags} --no-enable-autorepair" # not supported for UBUNTU
      additional_flags="${additional_flags} --no-enable-autoupgrade" # not supported for UBUNTU
    }
    gcloud container clusters create $CLUSTER_NAME \
      --region=$CLUSTER_ZONE \
      --cluster-version=latest \
      --machine-type=${MACHINE_TYPE} \
      --enable-autoscaling --min-nodes=1 --max-nodes=5 \
      --enable-autorepair \
      --scopes=service-control,service-management,compute-rw,storage-ro,cloud-platform,logging-write,monitoring-write,pubsub,datastore \
      --num-nodes=3 \
      --no-enable-basic-auth \
      --no-issue-client-certificate \
      --enable-ip-alias \
      --metadata disable-legacy-endpoints=true \
      ${additional_flags}

    kubectl create clusterrolebinding cluster-admin-binding \
      --clusterrole=cluster-admin \
      --user=$(gcloud config get-value core/account)

    [[ "${cfcontainers:-}" == "1" ]] && {
      echo "- Update nodes to support cgroup swap accounting..."
      instance_names=$(gcloud compute instances list --filter=name~$CLUSTER_NAME --format json | jq --raw-output '.[].name')
      echo "$instance_names" | xargs -I {} gcloud compute ssh {} -- "sudo sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"console=ttyS0 net.ifnames=0\"/GRUB_CMDLINE_LINUX_DEFAULT=\"console=ttyS0 net.ifnames=0 swapaccount=1\"/g' /etc/default/grub.d/50-cloudimg-settings.cfg"
      # Update grub
      echo "$instance_names" | xargs -I {} gcloud compute ssh {} -- "sudo update-grub"
      # Restart VMs
      echo "$instance_names" | xargs gcloud compute instances reset
    }

    [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
      echo "Storing cluster into credhub ${CREDHUB_BASE_PATH}..."
      credhub set -n ${CREDHUB_BASE_PATH}/gke-project-name   -t value -v $PROJECT_NAME
      credhub set -n ${CREDHUB_BASE_PATH}/gke-cluster-name   -t value -v $CLUSTER_NAME
      credhub set -n ${CREDHUB_BASE_PATH}/gke-cluster-zone   -t value -v $CLUSTER_ZONE
      credhub set -n ${CREDHUB_BASE_PATH}/gke-cluster-region -t value -v $CLUSTER_REGION
    }
  }
  gcloud container clusters get-credentials $CLUSTER_NAME --region $CLUSTER_ZONE --project $PROJECT_NAME

  [[ "${helm:-}" == "1" ]] && {
    echo "Install/upgrade Tiller Server for Helm"
    helm-manager up
    helm repo update
    [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
      echo "Storing helm into credhub ${CREDHUB_BASE_PATH}..."
      [[ -f $(helm home)/ca.pem ]] && {
        credhub set -n ${CREDHUB_BASE_PATH}/helm-ca -t value -v "$(cat $(helm home)/ca.pem)"
        credhub set -n ${CREDHUB_BASE_PATH}/helm-tiller-cert -t value -v "$(cat $(helm home)/cert.pem)"
        credhub set -n ${CREDHUB_BASE_PATH}/helm-tiller-key -t value -v "$(cat $(helm home)/key.pem)"
      }
    }
  }
  [[ "${servicecatalog:-}" == "1" ]] && {
    echo "Install/upgrade Service Catalog via Helm"
    helm repo add svc-cat https://svc-catalog-charts.storage.googleapis.com
    helm upgrade --install catalog svc-cat/catalog --namespace catalog --wait
  }
  [[ "${cf_broker:-}" == "1" ]] && {
    [[ "$(helm plugin list | grep "^s3 ")X" == "X" ]] && {
      echo "Install helm-s3 plugin"
      helm plugin install https://github.com/hypnoglow/helm-s3.git
    }
    echo "Install/upgrade CF Marketplace Service Broker via Helm"
    helm repo add starkandwayne s3://helm.starkandwayne.com/charts
    helm repo update
    helm upgrade --install --namespace catalog pws-broker starkandwayne/cf-marketplace-servicebroker --wait \
      --set "cf.api=$CF_API" \
      --set "cf.username=${CF_USERNAME:?required},cf.password=${CF_PASSWORD:?required}" \
      --set "cf.organizationGUID=$(jq -r .OrganizationFields.GUID ~/.cf/config.json)" \
      --set "cf.spaceGUID=$(jq -r .SpaceFields.GUID ~/.cf/config.json)"

    # TODO: move into a kubectl apply -f <(echo "--- {}")
    set +e
    kubectl create secret generic pws-broker-cf-marketplace-servicebroker-basic-auth \
      --from-literal username=broker \
      --from-literal password=broker
    set -e

    sleep 5
    svcat register pws-broker-cf-marketplace-servicebroker \
      --url http://pws-broker-cf-marketplace-servicebroker.catalog.svc.cluster.local:8080 \
      --scope cluster \
      --basic-secret pws-broker-cf-marketplace-servicebroker-basic-auth
  }

  [[ "${kpack:-}" == "1" ]] && {
    echo "Install kpack v${kpack_version}"
    kubectl apply -f <(curl -L https://github.com/pivotal/kpack/releases/download/v${kpack_version}/release.yaml)
    echo "Installing resources from resources/kpack/*.yaml"
    ls resources/kpack/*.yaml | xargs -L1 kubectl apply -f
  }

  [[ "${cfeirini:-}" == "1" ]] && {
    echo "Install Cloud Foundry/Quarks (cf-operator)"
    helm upgrade --install --wait --namespace scf \
      cf-operator \
      resources/eirini/cf-operator \
      --set "provider=gke"

    echo "Install Cloud Foundry/Eirini (scf)"
    helm upgrade --install --wait --namespace scf \
      scf \
      resources/eirini/scf \
      --set "system_domain=scf.suse.dev"
  }

  [[ "${tekton:-}" == "1" ]] && {
    echo "Install tekton"
    kubectl apply --filename https://storage.googleapis.com/tekton-releases/latest/release.yaml
    echo "Installing resources from resources/tekton/*.yaml"
    ls resources/tekton/*.yaml | xargs -L1 kubectl apply -f
  }

  [[ "${knative:-}" == "1" ]] && {
    echo "Install/upgrade Knative without monitoring"
    kubectl apply --wait=true \
      --filename https://raw.githubusercontent.com/knative/serving/master/third_party/istio-${knative_istio_version}/istio-crds.yaml \
      --filename https://raw.githubusercontent.com/knative/serving/master/third_party/istio-${knative_istio_version}/istio-lean.yaml

    kubectl apply --wait=true \
      --filename https://github.com/knative/serving/releases/download/v${knative_version}/serving.yaml \
      --filename https://github.com/knative/build/releases/download/v${knative_build_version}/build.yaml

    # kubectl apply --wait=true \
    #   --filename https://github.com/knative/serving/releases/download/v${knative_version}/monitoring.yaml

    # knctl domain create --default --domain knative.starkandwayne.com

    echo "Deploy sanity test app to Knative"
    set +e
    kubectl create ns bootstrap-test
    set -e
    knctl deploy \
      --namespace bootstrap-test \
      --service hello \
      --image gcr.io/knative-samples/helloworld-go \
      --env TARGET=Bootstrap

    podStatus=Init
    while [[ "${podStatus}" != "Running" ]]; do
      sleep 2
      podStatus=$(kubectl get pods -n bootstrap-test -l serving.knative.dev/configuration=hello -o jsonpath="{.items[0].status.phase}")
      echo "  ${podStatus}"
    done
    knctl curl -n bootstrap-test -s hello
  }

  [[ "${knative_addr_name:-X}" != "X" ]] && {
    address=$(gcloud compute addresses describe knative-ingress --region $CLUSTER_REGION --format json)
    ip=$(echo "$address" | jq -r ".address")
    echo "Mapping Knative Ingress Gateway to $ip..."
    kubectl patch svc istio-ingressgateway --namespace istio-system --patch \
      $(echo "$address" | jq -cr "{spec: {loadBalancerIP: .address}}")

    echo
    echo "In a while, test your DNS + ingress with:"
    echo "  curl -v hello.bootstrap-test.knative.starkandwayne.com"
    echo
  }

  [[ "${knative_build:-}" == "1" ]] && {
    echo "Install/upgrade Knative Build"
    kubectl apply -f https://github.com/knative/build/releases/download/v${knative_build_version}/build.yaml --wait
  }

  [[ "${kubeapps:-}" == "1" ]] && {
    # TODO: convert to kubectl apply -f <()
    set +e
    kubectl create serviceaccount kubeapps-operator
    kubectl create clusterrolebinding kubeapps-operator --clusterrole=cluster-admin --serviceaccount=default:kubeapps-operator
    set -e

    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm upgrade --install kubeapps bitnami/kubeapps --namespace kubeapps \
      --set tillerProxy.tls.verify=true \
      --set tillerProxy.tls.ca="$(cat $(helm home)/ca.pem)" \
      --set tillerProxy.tls.key="$(cat $(helm home)/key.pem)" \
      --set tillerProxy.tls.cert="$(cat $(helm home)/cert.pem)" \
      --wait

    echo "Use the following token to authenticate:"
    echo "kubectl get secret \$(kubectl get serviceaccount kubeapps-operator -o jsonpath='{.secrets[].name}') -o jsonpath='{.data.token}' | base64 --decode"
  }
}

case "${1:-usage}" in
  up)
    shift
    while [[ $# -gt 0 ]]; do
      case "${1:-}" in
        --cfcontainers)
          export cfcontainers=1
          export helm=1
          ;;
        --cf|--eirini)
          export helm=1
          export cfeirini=1
          ;;
        --kpack)
          export kpack=1
          ;;
        --tekton)
          export tekton=1
          ;;
        --knative)
          export knative=1
          ;;
        --knative-addr-name)
          shift
          export knative_addr_name=$1
          ;;
        --knative-build)
          export knative_build=1
          ;;
        --helm|--tiller)
          export helm=1
          ;;
        --service-catalog|--sc)
          export helm=1
          export servicecatalog=1
          ;;
        --cf-broker)
          export helm=1
          export servicecatalog=1
          export cf_broker=1
          ;;
        --kubeapps)
          export helm=1
          export kubeapps=1
          ;;
        --credhub-store)
          shift
          export CREDHUB_BASE_PATH=$1
          ;;
      esac
      shift
    done

    up
    ;;

  down)
    shift
    while [[ $# -gt 0 ]]; do
      case "${1:-}" in
        --credhub-store)
          shift
          export CREDHUB_BASE_PATH=$1
          ;;
      esac
      shift
    done
    down
    ;;

  *)
    usage
    exit 1
    ;;
esac
