#!/bin/bash

set -eu

: "${PROJECT_NAME:=$(gcloud config get-value core/project)}"
: "${CLUSTER_REGION:=$(gcloud config get-value compute/region)}"
: "${CLUSTER_ZONE:=$(gcloud config get-value compute/zone)}"
: "${CLUSTER_VERSION:=latest}"
: "${MACHINE_TYPE:=n1-standard-2}"

: "${CF_SYSTEM_DOMAIN:=scf.suse.dev}"
: "${CF_NAMESPACE:=scf}"

# currently this combo works; others are not working. See respective issues.
export CFOPERATOR_TAG=${CFOPERATOR_TAG:-v0.4.1-60.g642832d0}
export SCF_RELEASE_FILE=${SCF_RELEASE_FILE:-scf-3.0.0-8f7a71d1.tgz}

# helm-manager can put its state into this project, not its own
export HELM_MGR_STATE_ROOT=state/helm

# helm-manager sets up TLS for tiller; so use `--tls` for all helm commands
export HELM_TLS_VERIFY=true

export kpack_version=${KPACK_VERSION:-0.0.4}
export kpack_release_url=${KPACK_RELEASE_URL:-"https://github.com/pivotal/kpack/releases/download/v${kpack_version}/release-${kpack_version}.yaml"}
# https://github.com/knative/serving/tree/master/third_party
export knative_istio_version=${ISTIO_VERSION:-1.3.0}
# https://github.com/knative/serving/releases
export knative_version=${KNATIVE_VERSION:-0.9.0}

# Install latest from CI/S3 bucket by default
export scf_release_url=${SCF_RELEASE_URL:-}
# Also can use SCF_RELEASE_FILE=scf-3.0.0-8f7a71d1.tgz for file from bucket

_cluster_name() {
  echo "${CLUSTER_NAME:="$(whoami)-dev"}"
}

usage() {
    echo "Bootstrap GKE and subsystems:"
    echo "  up [--helm|--tiller] -- deploys secure Helm"
    echo "     [--cf|--eirini]   -- deploys Cloud Foundry/Eirini"
    echo "     [--cf-operator]   -- deploys only CF Operator"
    echo "     [--kpack]         -- deploys kpack to build images with buildpacks"
    echo "     [--tekton]        -- deploys Tekton CD"
    echo "     [--knative]       -- deploys Knative Serving/Eventing/Istio"
    echo "     [--knative-addr-name name] -- map GCP address to ingress gateway"
    echo "     [--kubeapp]               -- deploys Kubeapps"
    echo "     [--service-catalog|--sc]  -- deploys Helm/Service Catalog"
    echo "     [--cf-broker]     -- deploys Helm/Service Catalog/Cloud Foundry Service Broker"
    echo "  describe                      -- describes GKE cluster"
    echo "  down                          -- destroys GKE cluster"
}

down() {
  [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
    echo "Deleting values from Credhub ${CREDHUB_BASE_PATH}..."
    set +e
    credhub delete -n "${CREDHUB_BASE_PATH}/gke-project-name"
    credhub delete -n "${CREDHUB_BASE_PATH}/gke-cluster-name"
    credhub delete -n "${CREDHUB_BASE_PATH}/gke-cluster-zone"
    credhub delete -n "${CREDHUB_BASE_PATH}/gke-cluster-region"
    credhub delete -n "${CREDHUB_BASE_PATH}/helm-ca"
    credhub delete -n "${CREDHUB_BASE_PATH}/helm-tiller-cert"
    credhub delete -n "${CREDHUB_BASE_PATH}/helm-tiller-key"
    set -e
  }
  gcloud container clusters delete "$(_cluster_name)" --region "$CLUSTER_ZONE" --quiet
}

describe() {
  gcloud container clusters describe "$(_cluster_name)" --region "$CLUSTER_ZONE"
}

failfast() {
  set +e
  errors_file=$(mktemp)
  trap "rm -f ${errors_file}" EXIT

  [[ "$(command -v gcloud)X" == "X" ]] && { echo "ERROR: missing 'gcloud' CLI from \$PATH" >> $errors_file; }
  [[ "$(command -v kubectl)X" == "X" ]] && { echo "ERROR: missing 'kubectl' CLI from \$PATH" >> $errors_file; }

  bin/bootstrap-helm failfast "$errors_file"
  bin/bootstrap-servicecatalog failfast "$errors_file"
  bin/bootstrap-cf-broker failfast "$errors_file"
  bin/bootstrap-kpack failfast "$errors_file"
  bin/bootstrap-cf-operator failfast "$errors_file"
  bin/bootstrap-scf failfast "$errors_file"
  bin/bootstrap-tekton failfast "$errors_file"
  bin/bootstrap-knative failfast "$errors_file"
  bin/bootstrap-kubeapps failfast "$errors_file"

  cat "${errors_file}"
  [[ -n "$(cat "${errors_file}")" ]] && { exit 1; }
  set -e
  exit 0;
}

up() {
  failfast


  [[ "${cf_broker:-}" == "1" ]] && {
    echo "Testing login to Cloud Foundry ${CF_API}..."
    cf api "${CF_API}"
    cf auth "${CF_USERNAME}" "${CF_PASSWORD}"
    cf target -o "${CF_ORGANIZATION}" -s "${CF_SPACE}"
  }

  [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
    echo "Testing access to Credhub ${CREDHUB_BASE_PATH}..."
    credhub find -n "${CREDHUB_BASE_PATH}" > /dev/null
  }

  gcloud container clusters describe "$(_cluster_name)" --region "$CLUSTER_ZONE" 2>&1 > /dev/null || {
    echo "Creating GKE cluster..."
    additional_flags=
    [[ "${cfcontainers:-}" == "1" ]] && {
      echo "- Using UBUNTU image-type for cf-containers/eirini requirements"
      # https://github.com/SUSE/scf/wiki/Deployment-on-Google-GKE
      additional_flags="${additional_flags} --image-type UBUNTU"
      # TODO -  additional_flags="${additional_flags} --addons=HttpLoadBalancing"
      # see https://cloud.google.com/sdk/gcloud/reference/container/clusters/create
      additional_flags="${additional_flags} --no-enable-autorepair" # not supported for UBUNTU
      additional_flags="${additional_flags} --no-enable-autoupgrade" # not supported for UBUNTU
    }
    gcloud container clusters create "$(_cluster_name)" \
      --region="$CLUSTER_ZONE" \
      --cluster-version="${CLUSTER_VERSION}" \
      --machine-type="${MACHINE_TYPE}" \
      --enable-autoscaling --min-nodes=1 --max-nodes=5 \
      --enable-autorepair \
      --scopes=service-control,service-management,compute-rw,storage-ro,cloud-platform,logging-write,monitoring-write,pubsub,datastore \
      --num-nodes=3 \
      --no-enable-basic-auth \
      --no-issue-client-certificate \
      --enable-ip-alias \
      --metadata disable-legacy-endpoints=true \
      ${additional_flags}

    kubectl create clusterrolebinding cluster-admin-binding \
      --clusterrole=cluster-admin \
      --user="$(gcloud config get-value core/account)"

    [[ "${cfcontainers:-}" == "1" ]] && {
      echo "- Update nodes to support cgroup swap accounting..."
      instance_names=$(gcloud compute instances list --filter="name~$(_cluster_name)" --format json | jq --raw-output '.[].name')
      echo "$instance_names" | xargs -I {} gcloud compute ssh {} -- "sudo sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"console=ttyS0 net.ifnames=0\"/GRUB_CMDLINE_LINUX_DEFAULT=\"console=ttyS0 net.ifnames=0 swapaccount=1\"/g' /etc/default/grub.d/50-cloudimg-settings.cfg"
      # Update grub
      echo "$instance_names" | xargs -I {} gcloud compute ssh {} -- "sudo update-grub"
      # Restart VMs
      echo "$instance_names" | xargs gcloud compute instances reset
    }

    [[ "${CREDHUB_BASE_PATH:-X}" != "X" ]] && {
      echo "Storing cluster into credhub ${CREDHUB_BASE_PATH}..."
      credhub set -n "${CREDHUB_BASE_PATH}/gke-project-name"   -t value -v "$PROJECT_NAME"
      credhub set -n "${CREDHUB_BASE_PATH}/gke-cluster-name"   -t value -v "$(_cluster_name)"
      credhub set -n "${CREDHUB_BASE_PATH}/gke-cluster-zone"   -t value -v "$CLUSTER_ZONE"
      credhub set -n "${CREDHUB_BASE_PATH}/gke-cluster-region" -t value -v "$CLUSTER_REGION"
    }
  }
  gcloud container clusters get-credentials "$(_cluster_name)" --region "$CLUSTER_ZONE" --project "$PROJECT_NAME"

  [[ "${helm:-}" == "1" ]] && { bin/bootstrap-helm up; }
  [[ "${servicecatalog:-}" == "1" ]] && { bin/bootstrap-servicecatalog up; }
  [[ "${cf_broker:-}" == "1" ]] && { bin/bootstrap-cf-broker up; }
  [[ "${kpack:-}" == "1" ]] && { bin/boostrap-kpack up; }
  [[ "${cfoperator:-}" == "1" ]] && { bin/bootsrap-cf-operator up; }
  [[ "${cfeirini:-}" == "1" ]] && { bin/bootstrap-cf up; }
  [[ "${tekton:-}" == "1" ]] && { bin/bootstrap-tekton up; }
  [[ "${knative:-}" == "1" ]] && { bin/bootstrap-knative up; }
  [[ "${kubeapps:-}" == "1" ]] && { bin/bootstrap-kubeapps up; }
}

case "${1:-usage}" in
  up)
    shift
    while [[ $# -gt 0 ]]; do
      case "${1:-}" in
        --cfcontainers)
          export cfcontainers=1
          export helm=1
          ;;
        --cf|--eirini)
          export helm=1
          export cfoperator=1
          export cfeirini=1
          export scf=1
          ;;
        --cf-operator)
          export helm=1
          export cfoperator=1
          ;;
        --kpack)
          export kpack=1
          ;;
        --tekton)
          export tekton=1
          ;;
        --knative)
          export knative=1
          ;;
        --knative-addr-name)
          shift
          export knative_addr_name=$1
          ;;
        --helm|--tiller)
          export helm=1
          ;;
        --service-catalog|--sc)
          export helm=1
          export servicecatalog=1
          ;;
        --cf-broker)
          export helm=1
          export servicecatalog=1
          export cf_broker=1
          ;;
        --kubeapps)
          export helm=1
          export kubeapps=1
          ;;
        --credhub-store)
          shift
          export CREDHUB_BASE_PATH=$1
          ;;
      esac
      shift
    done

    up
    ;;

  describe)
    shift
    describe
    ;;

  failfast)
    shift
    failfast
    ;;

  down)
    shift
    while [[ $# -gt 0 ]]; do
      case "${1:-}" in
        --credhub-store)
          shift
          export CREDHUB_BASE_PATH=$1
          ;;
      esac
      shift
    done
    down
    ;;

  *)
    usage
    exit 1
    ;;
esac
