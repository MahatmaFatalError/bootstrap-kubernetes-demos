#!/bin/bash

# Infos
# https://github.com/SUSE/scf/wiki/How-to-Install-SCF#requirements-for-kubernetes
# https://documentation.suse.com/suse-cap/1/html/cap-guides/cha-cap-depl-aks.html 

set -eu

cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

state_dir=state/azure
mkdir -p $state_dir

_cluster_name() {
  [[ -f $state_dir/cluster-name ]] || {
    : ${CLUSTER_NAME:="$(whoami)-$(LC_ALL=C tr -dc 'a-z0-9' </dev/urandom | head -c 6)"}
    echo "$CLUSTER_NAME" > $state_dir/cluster-name
  }
  cat $state_dir/cluster-name
}

_setup_env() {
  export SUBSCRIPTION_ID="${SUBSCRIPTION_ID:-$(az account show --query '{ subscription_id: id }' -o tsv)}"
  export RG_NAME="rsg-name"
  export AKS_NAME=$(_cluster_name)
  export REGION="westeurope"
  export NODE_COUNT="3"
  #export NODE_VM_SIZE="Standard_DS4_v2" #this size is recommended by suse
  export NODE_VM_SIZE="Standard_A2m_v2"
  export SSH_KEY_VALUE="~/.ssh/id_rsa.pub"
  export ADMIN_USERNAME="scf-admin"
  export NODEPOOL_NAME="mypool"

  K8S_VERSION=${K8S_VERSION:-$(az aks get-versions -l "$REGION" | jq -r ".orchestrators | last | .orchestratorVersion")}
}

failfast() {
  [[ "$(command -v az)X" != "X" ]] || {
    echo "ERROR: missing 'az' CLI from \$PATH" >> $1
  }

  [[ -f state/configuration/credhub-base-path ]] && {
    CREDHUB_BASE_PATH=$(cat state/configuration/credhub-base-path)
    echo "Testing access to Credhub ${CREDHUB_BASE_PATH}..."
    credhub find -n "${CREDHUB_BASE_PATH}" > /dev/null
  }
}

clusterJSON() {
  az aks list | jq -r --arg name "$AKS_NAME" '. | map(select(.name == $name))[0]'
}

clusterProvisioningState() {
  clusterJSON | jq -r '.provisioningState // ""'
}

up() {
  _setup_env

  [[ -z "$(clusterProvisioningState)" ]] && {
    az account set --subscription "$SUBSCRIPTION_ID"
    echo 'Verify that the Microsoft.Network, Microsoft.Storage, Microsoft.Compute, and Microsoft.ContainerService providers are enabled:'
    az provider list | grep -E --word-regexp 'Microsoft.Network|Microsoft.Storage|Microsoft.Compute|Microsoft.ContainerService'
    az group create --name "$RG_NAME" --location "$REGION"
    echo "Creating AKS cluster..."
    az aks create \
      --resource-group "${RG_NAME}" \
      --name "${AKS_NAME}" \
      --node-count ${NODE_COUNT} \
      --admin-username ${ADMIN_USERNAME} \
      --node-vm-size ${NODE_VM_SIZE} \
      --node-osdisk-size=80 --nodepool-name ${NODEPOOL_NAME} \
      ${K8S_VERSION:+--kubernetes-version "$K8S_VERSION"} \
      ${DEBUG:+--verbose} \
      ${SSH_KEY_VALUE:+ --ssh-key-value "$SSH_KEY_VALUE"}
  }

  az aks wait -g "${RG_NAME}" -n "${AKS_NAME}" --created --interval 2 --timeout 900

  echo "Current Kubernetes nodes:"
  kubectl get nodes

  [[ "${cfcontainers:-}" == "1" ]] && {
    echo "- Update nodes to support cgroup swap accounting..."
    MC_RG_NAME=$(az aks show --resource-group "$RG_NAME" --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
    VM_NODES=$(az vm list --resource-group "$MC_RG_NAME" --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
    for i in $VM_NODES
    do
      az vm run-command invoke --resource-group "$MC_RG_NAME" --name "$i" --command-id RunShellScript --scripts \
      "sudo sed --in-place --regexp-extended 's|^(GRUB_CMDLINE_LINUX_DEFAULT=)\"(.*.)\"|\1\"\2 swapaccount=1\"|' \
      /etc/default/grub.d/50-cloudimg-settings.cfg && sudo update-grub"
        az vm restart --resource-group "$MC_RG_NAME" --name "$i"
    done
  }

  az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME
}

describe() {
  _setup_env
  az aks list --resource-group $RG_NAME --subscription "$SUBSCRIPTION_ID"
}

down() {
  _setup_env
  echo 'Deleting the AKS cluster....'
  az aks delete --resource-group $RG_NAME --name $AKS_NAME --verbose
}

suspend() {
  _setup_env
  echo 'Supend the AKS cluster vms....'
  export MC_RG_NAME=$(az aks show --resource-group $RG_NAME --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
  export VM_NODES=$(az vm list --resource-group $MC_RG_NAME --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
  for i in $VM_NODES
  do
      echo $i
      az vm deallocate --resource-group $MC_RG_NAME --name $i --verbose
  done
}

resume() {
  _setup_env
  echo 'Resume the ASK cluster vms....'
  MC_RG_NAME=$(az aks show --resource-group $RG_NAME --name $AKS_NAME --query nodeResourceGroup --output json | jq -r '.')
  VM_NODES=$(az vm list --resource-group $MC_RG_NAME --output json | jq -r '.[] | select (.tags.poolName | contains("'$NODEPOOL_NAME'")) | .name')
  for i in $VM_NODES
  do
      echo "Restarting node $i..."
      az vm start --resource-group "$MC_RG_NAME" --name "$i" --verbose
  done
}

case "${1:-usage}" in
  failfast)
    shift
    failfast "$@"
    ;;

  up)
    shift
    up
    ;;

  describe)
    shift
    describe
    ;;

  down)
    shift
    down
    ;;

  sus|suspend)
    shift
    suspend
    ;;

  repl|restore|restart|resume)
    shift
    resume
    ;;

  *)
    ;;
esac
